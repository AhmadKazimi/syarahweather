<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ArgumentListWrapping:AppNavigation.kt$( modifier = Modifier.padding(innerPadding), navController = navController, startDestination = Screen.WeatherDetails)</ID>
    <ID>ArgumentListWrapping:ManageLocationsViewModel.kt$ManageLocationsViewModel$(ManageLocationsViewAction.NavigateToPlacesSearch)</ID>
    <ID>ArgumentListWrapping:ManageLocationsViewModel.kt$ManageLocationsViewModel$(ManageLocationsViewAction.NavigateToWeatherDetails(intent.location))</ID>
    <ID>ArgumentListWrapping:ManageLocationsViewModel.kt$ManageLocationsViewModel$(ManageLocationsViewAction.OpenLocationSettings)</ID>
    <ID>ArgumentListWrapping:ManageLocationsViewModel.kt$ManageLocationsViewModel$(intent.location)</ID>
    <ID>ArgumentListWrapping:SaveNewLocationUseCase.kt$SaveNewLocationUseCase$(AppError(message = "Maximum ${LocationConstants.MAX_SAVED_LOCATIONS} locations allowed"))</ID>
    <ID>ArgumentListWrapping:SaveNewLocationUseCase.kt$SaveNewLocationUseCase$(Result.Error(AppError(message = "Maximum ${LocationConstants.MAX_SAVED_LOCATIONS} locations allowed")))</ID>
    <ID>ArgumentListWrapping:SaveNewLocationUseCase.kt$SaveNewLocationUseCase$(message = "Maximum ${LocationConstants.MAX_SAVED_LOCATIONS} locations allowed")</ID>
    <ID>BlockCommentInitialStarAlignment:Type.kt$/* Other default text styles to override titleLarge = TextStyle( fontFamily = FontFamily.Default, fontWeight = FontWeight.Normal, fontSize = 22.sp, lineHeight = 28.sp, letterSpacing = 0.sp ), labelSmall = TextStyle( fontFamily = FontFamily.Default, fontWeight = FontWeight.Medium, fontSize = 11.sp, lineHeight = 16.sp, letterSpacing = 0.5.sp ) */</ID>
    <ID>CyclomaticComplexMethod:ManageLocationsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ManageLocationsScreen( navController: NavController, fromLocationIssue: Boolean = false, viewModel: ManageLocationsViewModel = hiltViewModel() )</ID>
    <ID>CyclomaticComplexMethod:ManageLocationsViewModel.kt$ManageLocationsViewModel$override suspend fun processViewIntent(intent: ViewIntent)</ID>
    <ID>Filename:AppScreens.kt$com.kazimi.syarahweather.ui.navigation.AppScreens.kt</ID>
    <ID>Filename:Constants.kt$com.kazimi.syarahweather.domain.common.Constants.kt</ID>
    <ID>FinalNewline:AppError.kt$com.kazimi.syarahweather.domain.error.AppError.kt</ID>
    <ID>FinalNewline:AppModule.kt$com.kazimi.di.AppModule.kt</ID>
    <ID>FinalNewline:AppScreens.kt$com.kazimi.syarahweather.ui.navigation.AppScreens.kt</ID>
    <ID>FinalNewline:CanAddMoreLocationsUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.CanAddMoreLocationsUseCase.kt</ID>
    <ID>FinalNewline:Color.kt$com.kazimi.syarahweather.ui.theme.Color.kt</ID>
    <ID>FinalNewline:ComposeBaseViewModel.kt$com.kazimi.syarahweather.ui.base.viewmodel.ComposeBaseViewModel.kt</ID>
    <ID>FinalNewline:Constants.kt$com.kazimi.syarahweather.domain.common.Constants.kt</ID>
    <ID>FinalNewline:CurrentLocationSection.kt$com.kazimi.syarahweather.ui.screens.managelocations.component.CurrentLocationSection.kt</ID>
    <ID>FinalNewline:CurrentWeatherResponse.kt$com.kazimi.syarahweather.data.dto.CurrentWeatherResponse.kt</ID>
    <ID>FinalNewline:ExampleUnitTest.kt$com.kazimi.syarahweather.ExampleUnitTest.kt</ID>
    <ID>FinalNewline:GetCurrentLocationUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.GetCurrentLocationUseCase.kt</ID>
    <ID>FinalNewline:GetCurrentSavedLocationUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.GetCurrentSavedLocationUseCase.kt</ID>
    <ID>FinalNewline:GetFiveDayForecastUseCase.kt$com.kazimi.syarahweather.domain.usecase.weatherdetails.GetFiveDayForecastUseCase.kt</ID>
    <ID>FinalNewline:GetFiveDayForecastUseCaseTest.kt$com.kazimi.syarahweather.domain.usecase.weatherdetails.GetFiveDayForecastUseCaseTest.kt</ID>
    <ID>FinalNewline:GetSavedLocationsUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.GetSavedLocationsUseCase.kt</ID>
    <ID>FinalNewline:GetWeatherUseCase.kt$com.kazimi.syarahweather.domain.usecase.weatherdetails.GetWeatherUseCase.kt</ID>
    <ID>FinalNewline:LocationDataSource.kt$com.kazimi.syarahweather.domain.datasource.LocationDataSource.kt</ID>
    <ID>FinalNewline:LocationDataSourceImpl.kt$com.kazimi.syarahweather.data.local.datasource.LocationDataSourceImpl.kt</ID>
    <ID>FinalNewline:LocationHelper.kt$com.kazimi.syarahweather.ui.util.LocationHelper.kt</ID>
    <ID>FinalNewline:LocationJsonConverter.kt$com.kazimi.syarahweather.data.local.converter.LocationJsonConverter.kt</ID>
    <ID>FinalNewline:LocationRepository.kt$com.kazimi.syarahweather.domain.repository.LocationRepository.kt</ID>
    <ID>FinalNewline:LocationRepositoryImpl.kt$com.kazimi.syarahweather.data.repository.LocationRepositoryImpl.kt</ID>
    <ID>FinalNewline:MainActivity.kt$com.kazimi.syarahweather.MainActivity.kt</ID>
    <ID>FinalNewline:ManageLocationsViewIntent.kt$com.kazimi.syarahweather.ui.screens.managelocations.ManageLocationsViewIntent.kt</ID>
    <ID>FinalNewline:Mapper.kt$com.kazimi.syarahweather.data.Mapper.kt</ID>
    <ID>FinalNewline:NetworkModule.kt$com.kazimi.di.NetworkModule.kt</ID>
    <ID>FinalNewline:PlaceSearchResult.kt$com.kazimi.syarahweather.domain.model.PlaceSearchResult.kt</ID>
    <ID>FinalNewline:PlaceSearchResultItem.kt$com.kazimi.syarahweather.ui.screens.placesearch.component.PlaceSearchResultItem.kt</ID>
    <ID>FinalNewline:PlacesRepository.kt$com.kazimi.syarahweather.domain.repository.PlacesRepository.kt</ID>
    <ID>FinalNewline:PlacesRepositoryImpl.kt$com.kazimi.syarahweather.data.repository.PlacesRepositoryImpl.kt</ID>
    <ID>FinalNewline:PlacesSearchContent.kt$com.kazimi.syarahweather.ui.screens.placesearch.component.PlacesSearchContent.kt</ID>
    <ID>FinalNewline:PlacesSearchScreen.kt$com.kazimi.syarahweather.ui.screens.placesearch.PlacesSearchScreen.kt</ID>
    <ID>FinalNewline:PlacesSearchViewAction.kt$com.kazimi.syarahweather.ui.screens.placesearch.PlacesSearchViewAction.kt</ID>
    <ID>FinalNewline:PlacesSearchViewIntent.kt$com.kazimi.syarahweather.ui.screens.placesearch.PlacesSearchViewIntent.kt</ID>
    <ID>FinalNewline:PlacesSearchViewModel.kt$com.kazimi.syarahweather.ui.screens.placesearch.PlacesSearchViewModel.kt</ID>
    <ID>FinalNewline:RemoveLocationUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.RemoveLocationUseCase.kt</ID>
    <ID>FinalNewline:RepositoryModule.kt$com.kazimi.di.RepositoryModule.kt</ID>
    <ID>FinalNewline:Result.kt$com.kazimi.syarahweather.domain.common.Result.kt</ID>
    <ID>FinalNewline:SaveNewLocationUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.SaveNewLocationUseCase.kt</ID>
    <ID>FinalNewline:SavedLocationItem.kt$com.kazimi.syarahweather.ui.screens.placesearch.component.SavedLocationItem.kt</ID>
    <ID>FinalNewline:SavedLocationsSection.kt$com.kazimi.syarahweather.ui.screens.managelocations.component.SavedLocationsSection.kt</ID>
    <ID>FinalNewline:SearchPlacesUseCase.kt$com.kazimi.syarahweather.domain.usecase.placesearch.SearchPlacesUseCase.kt</ID>
    <ID>FinalNewline:SearchStates.kt$com.kazimi.syarahweather.ui.screens.placesearch.component.SearchStates.kt</ID>
    <ID>FinalNewline:SetCurrentLocationUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.SetCurrentLocationUseCase.kt</ID>
    <ID>FinalNewline:SyarahWeather.kt$com.kazimi.syarahweather.SyarahWeather.kt</ID>
    <ID>FinalNewline:Theme.kt$com.kazimi.syarahweather.ui.theme.Theme.kt</ID>
    <ID>FinalNewline:Type.kt$com.kazimi.syarahweather.ui.theme.Type.kt</ID>
    <ID>FinalNewline:ViewAction.kt$com.kazimi.syarahweather.ui.base.viewmodel.ViewAction.kt</ID>
    <ID>FinalNewline:ViewIntent.kt$com.kazimi.syarahweather.ui.base.viewmodel.ViewIntent.kt</ID>
    <ID>FinalNewline:WeatherAPI.kt$com.kazimi.syarahweather.data.net.api.WeatherAPI.kt</ID>
    <ID>FinalNewline:WeatherData.kt$com.kazimi.syarahweather.domain.model.WeatherData.kt</ID>
    <ID>FinalNewline:WeatherDetailsScreen.kt$com.kazimi.syarahweather.ui.screens.weatherdetails.WeatherDetailsScreen.kt</ID>
    <ID>FinalNewline:WeatherDetailsViewIntent.kt$com.kazimi.syarahweather.ui.screens.weatherdetails.WeatherDetailsViewIntent.kt</ID>
    <ID>FinalNewline:WeatherDetailsViewModel.kt$com.kazimi.syarahweather.ui.screens.weatherdetails.WeatherDetailsViewModel.kt</ID>
    <ID>FinalNewline:WeatherRepository.kt$com.kazimi.syarahweather.domain.repository.WeatherRepository.kt</ID>
    <ID>FinalNewline:WeatherRepositoryImpl.kt$com.kazimi.syarahweather.data.repository.WeatherRepositoryImpl.kt</ID>
    <ID>FinalNewline:WeatherService.kt$com.kazimi.syarahweather.data.net.services.WeatherService.kt</ID>
    <ID>FunctionNaming:AppNavigation.kt$@Composable fun AppNavigation(innerPadding: PaddingValues)</ID>
    <ID>FunctionNaming:CurrentLocationSection.kt$@Composable fun CurrentLocationSection( permissionState: PermissionState, currentSavedLocation: SavedLocation?, currentLocationWeather: com.kazimi.syarahweather.domain.model.WeatherData?, onUpdateLocationPermissionClick: () -&gt; Unit = {}, onOpenSettingsClick: () -&gt; Unit = {}, onCurrentLocationClick: (SavedLocation) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:LocationListtItem.kt$@Composable fun LocationListItem( country: String, state: String, onItemClick: () -&gt; Unit, onDeleteClick: (() -&gt; Unit)? = null, temperature: String? = null, weatherCondition: String? = null, isCurrentLocation: Boolean = false )</ID>
    <ID>FunctionNaming:LocationListtItem.kt$@Preview(showBackground = true, showSystemUi = false) @Composable fun LocationListItemPreview()</ID>
    <ID>FunctionNaming:ManageLocationsScreen.kt$@Composable private fun LocationPermissionPermanentlyDeniedDialog( onOpenSettingsClick: () -&gt; Unit, onDismissClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ManageLocationsScreen.kt$@Composable private fun LocationPermissionRationaleDialog( onAllowClick: () -&gt; Unit, onDenyClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ManageLocationsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ManageLocationsScreen( navController: NavController, fromLocationIssue: Boolean = false, viewModel: ManageLocationsViewModel = hiltViewModel() )</ID>
    <ID>FunctionNaming:ManageLocationsScreen.kt$@Preview(showBackground = true, showSystemUi = false) @Composable fun ManageLocationsScreenPreview()</ID>
    <ID>FunctionNaming:PlaceSearchResultItem.kt$@Composable fun PlaceSearchResultItem( place: PlaceSearchResult, canAddLocation: Boolean, isAddingLocation: Boolean, onAddLocation: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:PlacesSearchContent.kt$@Composable fun PlacesSearchContent( uiState: PlacesSearchUiState, searchQuery: String, onSearchQueryChange: (String) -&gt; Unit, onAddLocation: (PlaceSearchResult) -&gt; Unit, onClearSearch: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:PlacesSearchScreen.kt$@Composable fun PlacesSearchScreen( navController: NavController, viewModel: PlacesSearchViewModel = hiltViewModel() )</ID>
    <ID>FunctionNaming:SavedLocationItem.kt$@Composable fun SavedLocationItem( location: SavedLocation, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:SavedLocationsSection.kt$@Composable fun SavedLocationsSection( savedLocationsInfo: List&lt;SavedLocation&gt;, isLoading: Boolean = false, onLocationClick: (SavedLocation) -&gt; Unit, onDeleteLocation: (String) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:SearchStates.kt$@Composable fun EmptySearchResults()</ID>
    <ID>FunctionNaming:SearchStates.kt$@Composable fun SearchPrompt(hasLocations: Boolean)</ID>
    <ID>FunctionNaming:SearchStates.kt$@Composable fun SearchingIndicator()</ID>
    <ID>FunctionNaming:Theme.kt$@Composable fun SyarahweatherTheme( darkTheme: Boolean = isSystemInDarkTheme(), // Dynamic color is available on Android 12+ dynamicColor: Boolean = true, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable fun WeatherDetailsScreen( navController: NavController, viewModel: WeatherDetailsViewModel = hiltViewModel() )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable private fun CurrentWeatherCard( currentWeather: CurrentWeather, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable private fun CurrentWeatherErrorCard( error: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable private fun CurrentWeatherLoadingCard( modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable private fun ForecastCard( forecast: List&lt;WeatherForecast&gt;, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable private fun ForecastErrorCard( error: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable private fun ForecastItem( forecast: WeatherForecast, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable private fun ForecastLoadingCard( modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable private fun NoLocationCard( onNavigateToManageLocations: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable private fun WeatherDetailItem( label: String, value: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable private fun WeatherDetailsCard( currentWeather: CurrentWeather, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WeatherDetailsScreen.kt$@Composable private fun WeatherDetailsContent( uiState: WeatherDetailsUiState, modifier: Modifier = Modifier, onNavigateToManageLocations: () -&gt; Unit = {} )</ID>
    <ID>FunctionReturnTypeSpacing:LocationDataSource.kt$LocationDataSource$fun saveLocation(location: SavedLocation):Flow&lt;Boolean&gt;</ID>
    <ID>FunctionReturnTypeSpacing:LocationDataSource.kt$LocationDataSource$fun setCurrentLocation(location: SavedLocation):Flow&lt;Boolean&gt;</ID>
    <ID>FunctionReturnTypeSpacing:SetCurrentLocationUseCase.kt$SetCurrentLocationUseCase$operator fun invoke(location: SavedLocation):Flow&lt;Result&lt;Boolean&gt;&gt;</ID>
    <ID>ImportOrdering:CurrentLocationSection.kt$import androidx.compose.foundation.layout.Column import androidx.compose.foundation.layout.Row import androidx.compose.foundation.layout.Spacer import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.foundation.layout.size import androidx.compose.foundation.layout.width import androidx.compose.foundation.shape.RoundedCornerShape import androidx.compose.material.icons.Icons import androidx.compose.material.icons.filled.GpsFixed import androidx.compose.material.icons.filled.LocationOn import androidx.compose.material.icons.filled.Settings import androidx.compose.material3.Button import androidx.compose.material3.ButtonDefaults import androidx.compose.material3.Icon import androidx.compose.material3.MaterialTheme import androidx.compose.material3.Text import androidx.compose.runtime.Composable import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.unit.dp import com.kazimi.syarahweather.domain.model.SavedLocation import com.kazimi.syarahweather.ui.screens.managelocations.PermissionState</ID>
    <ID>ImportOrdering:ExampleUnitTest.kt$import org.junit.Test import org.junit.Assert.*</ID>
    <ID>ImportOrdering:ManageLocationsScreen.kt$import android.Manifest import android.content.Intent import android.net.Uri import android.provider.Settings import androidx.activity.ComponentActivity import androidx.activity.compose.rememberLauncherForActivityResult import androidx.activity.result.contract.ActivityResultContracts import androidx.compose.foundation.layout.Arrangement import androidx.compose.foundation.layout.Box import androidx.compose.foundation.layout.Column import androidx.compose.foundation.layout.Row import androidx.compose.foundation.layout.Spacer import androidx.compose.foundation.layout.fillMaxSize import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.foundation.layout.size import androidx.compose.material.icons.Icons import androidx.compose.material.icons.automirrored.filled.ArrowBack import androidx.compose.material.icons.filled.Search import androidx.compose.material3.AlertDialog import androidx.compose.material3.ExperimentalMaterial3Api import androidx.compose.material3.FloatingActionButton import androidx.compose.material3.Icon import androidx.compose.material3.IconButton import androidx.compose.material3.MaterialTheme import androidx.compose.material3.SnackbarHost import androidx.compose.material3.SnackbarHostState import androidx.compose.material3.Text import androidx.compose.material3.TextButton import androidx.compose.runtime.Composable import androidx.compose.runtime.LaunchedEffect import androidx.compose.runtime.getValue import androidx.compose.runtime.mutableStateOf import androidx.compose.runtime.remember import androidx.compose.runtime.setValue import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.platform.LocalContext import androidx.compose.ui.text.font.FontWeight import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import androidx.hilt.navigation.compose.hiltViewModel import androidx.lifecycle.compose.collectAsStateWithLifecycle import androidx.navigation.NavController import com.kazimi.syarahweather.ui.navigation.Screen import com.kazimi.syarahweather.ui.screens.managelocations.component.CurrentLocationSection import com.kazimi.syarahweather.ui.screens.managelocations.component.SavedLocationsSection import com.kazimi.syarahweather.ui.util.PermissionExt</ID>
    <ID>ImportOrdering:ManageLocationsViewModel.kt$import android.location.Location import androidx.compose.runtime.Immutable import androidx.lifecycle.viewModelScope import com.kazimi.syarahweather.domain.common.LocationConstants import com.kazimi.syarahweather.domain.common.Result import com.kazimi.syarahweather.domain.common.isSuccessThen import com.kazimi.syarahweather.domain.error.AppError import com.kazimi.syarahweather.domain.model.SavedLocation import com.kazimi.syarahweather.domain.model.WeatherData import com.kazimi.syarahweather.domain.usecase.managelocation.GetCurrentLocationUseCase import com.kazimi.syarahweather.domain.usecase.managelocation.GetCurrentSavedLocationUseCase import com.kazimi.syarahweather.domain.usecase.managelocation.GetSavedLocationsUseCase import com.kazimi.syarahweather.domain.usecase.weatherdetails.GetWeatherUseCase import com.kazimi.syarahweather.domain.usecase.managelocation.RemoveLocationUseCase import com.kazimi.syarahweather.domain.usecase.managelocation.SetCurrentLocationUseCase import com.kazimi.syarahweather.ui.base.viewmodel.ComposeBaseViewModel import com.kazimi.syarahweather.ui.base.viewmodel.ViewAction import com.kazimi.syarahweather.ui.base.viewmodel.ViewIntent import com.kazimi.syarahweather.ui.util.LocationHelper import dagger.hilt.android.lifecycle.HiltViewModel import kotlinx.coroutines.ExperimentalCoroutinesApi import kotlinx.coroutines.flow.MutableStateFlow import kotlinx.coroutines.flow.asStateFlow import kotlinx.coroutines.flow.catch import kotlinx.coroutines.flow.collect import kotlinx.coroutines.flow.map import kotlinx.coroutines.flow.onEach import kotlinx.coroutines.flow.onStart import kotlinx.coroutines.flow.transformLatest import kotlinx.coroutines.flow.update import kotlinx.coroutines.launch import javax.inject.Inject</ID>
    <ID>ImportOrdering:PlacesRepositoryImpl.kt$import android.content.Context import android.location.LocationManager import com.google.android.gms.common.api.ApiException import com.google.android.libraries.places.api.Places import com.google.android.libraries.places.api.model.AutocompletePrediction import com.google.android.libraries.places.api.model.Place import com.google.android.libraries.places.api.net.FetchPlaceRequest import com.google.android.libraries.places.api.net.FindAutocompletePredictionsRequest import com.google.android.libraries.places.api.net.PlacesClient import com.kazimi.di.IoDispatcher import com.kazimi.syarahweather.domain.error.AppError import com.kazimi.syarahweather.domain.common.Result import com.kazimi.syarahweather.domain.model.PlaceSearchResult import com.kazimi.syarahweather.domain.repository.PlacesRepository import dagger.hilt.android.qualifiers.ApplicationContext import kotlinx.coroutines.CoroutineDispatcher import kotlinx.coroutines.flow.Flow import kotlinx.coroutines.flow.flow import kotlinx.coroutines.flow.flowOn import kotlinx.coroutines.suspendCancellableCoroutine import javax.inject.Inject import kotlin.coroutines.resume</ID>
    <ID>ImportOrdering:RepositoryModule.kt$import com.kazimi.syarahweather.data.local.datasource.LocationDataSourceImpl import com.kazimi.syarahweather.domain.datasource.LocationDataSource import com.kazimi.syarahweather.data.repository.LocationRepositoryImpl import com.kazimi.syarahweather.data.repository.PlacesRepositoryImpl import com.kazimi.syarahweather.data.repository.WeatherRepositoryImpl import com.kazimi.syarahweather.domain.repository.LocationRepository import com.kazimi.syarahweather.domain.repository.PlacesRepository import com.kazimi.syarahweather.domain.repository.WeatherRepository import dagger.Binds import dagger.Module import dagger.hilt.InstallIn import dagger.hilt.components.SingletonComponent import javax.inject.Singleton</ID>
    <ID>ImportOrdering:WeatherDetailsScreen.kt$import androidx.compose.foundation.layout.Arrangement import androidx.compose.foundation.layout.Box import androidx.compose.foundation.layout.Column import androidx.compose.foundation.layout.PaddingValues import androidx.compose.foundation.layout.Row import androidx.compose.foundation.layout.Spacer import androidx.compose.foundation.layout.fillMaxSize import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.foundation.layout.size import androidx.compose.foundation.layout.width import androidx.compose.foundation.lazy.LazyRow import androidx.compose.foundation.lazy.items import androidx.compose.foundation.shape.RoundedCornerShape import androidx.compose.material.icons.Icons import androidx.compose.material.icons.automirrored.filled.ArrowBack import androidx.compose.material.icons.filled.LocationOn import androidx.compose.material.icons.filled.Refresh import androidx.compose.material3.Button import androidx.compose.material3.Card import androidx.compose.material3.CardDefaults import androidx.compose.material3.CircularProgressIndicator import androidx.compose.material3.Icon import androidx.compose.material3.IconButton import androidx.compose.material3.MaterialTheme import androidx.compose.material3.Scaffold import androidx.compose.material3.Text import androidx.compose.runtime.Composable import androidx.compose.runtime.LaunchedEffect import androidx.compose.runtime.collectAsState import androidx.compose.runtime.getValue import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.text.font.FontWeight import androidx.compose.ui.text.style.TextAlign import androidx.compose.ui.unit.dp import androidx.hilt.navigation.compose.hiltViewModel import androidx.navigation.NavController import com.kazimi.syarahweather.domain.model.CurrentWeather import com.kazimi.syarahweather.domain.model.WeatherForecast import com.kazimi.syarahweather.ui.navigation.Screen import java.text.SimpleDateFormat import java.util.Date import java.util.Locale import kotlin.math.roundToInt</ID>
    <ID>ImportOrdering:WeatherDetailsViewModel.kt$import android.location.Location import androidx.compose.runtime.Immutable import androidx.lifecycle.SavedStateHandle import androidx.lifecycle.viewModelScope import androidx.navigation.toRoute import com.kazimi.syarahweather.domain.common.Result import com.kazimi.syarahweather.domain.model.SavedLocation import com.kazimi.syarahweather.domain.model.WeatherData import com.kazimi.syarahweather.domain.model.WeatherForecast import com.kazimi.syarahweather.domain.usecase.managelocation.GetCurrentLocationUseCase import com.kazimi.syarahweather.domain.usecase.managelocation.GetCurrentSavedLocationUseCase import com.kazimi.syarahweather.domain.usecase.weatherdetails.GetWeatherUseCase import com.kazimi.syarahweather.domain.usecase.managelocation.SetCurrentLocationUseCase import com.kazimi.syarahweather.domain.usecase.weatherdetails.GetFiveDayForecastUseCase import com.kazimi.syarahweather.ui.base.viewmodel.ComposeBaseViewModel import com.kazimi.syarahweather.ui.base.viewmodel.ViewAction import com.kazimi.syarahweather.ui.base.viewmodel.ViewIntent import com.kazimi.syarahweather.ui.navigation.Screen import com.kazimi.syarahweather.ui.util.LocationHelper import dagger.hilt.android.lifecycle.HiltViewModel import kotlinx.coroutines.flow.MutableStateFlow import kotlinx.coroutines.flow.asStateFlow import kotlinx.coroutines.flow.collect import kotlinx.coroutines.flow.map import kotlinx.coroutines.flow.update import kotlinx.coroutines.launch import javax.inject.Inject</ID>
    <ID>Indentation:ApiResponse.kt$ </ID>
    <ID>Indentation:LocationHelper.kt$LocationHelper$ </ID>
    <ID>Indentation:PermissionExt.kt$PermissionExt$ </ID>
    <ID>Indentation:PlacesSearchContent.kt$ </ID>
    <ID>Indentation:PlacesSearchViewModel.kt$PlacesSearchViewModel$ </ID>
    <ID>Indentation:SaveNewLocationUseCase.kt$SaveNewLocationUseCase$ </ID>
    <ID>LongMethod:CurrentLocationSection.kt$@Composable fun CurrentLocationSection( permissionState: PermissionState, currentSavedLocation: SavedLocation?, currentLocationWeather: com.kazimi.syarahweather.domain.model.WeatherData?, onUpdateLocationPermissionClick: () -&gt; Unit = {}, onOpenSettingsClick: () -&gt; Unit = {}, onCurrentLocationClick: (SavedLocation) -&gt; Unit = {} )</ID>
    <ID>LongMethod:LocationListtItem.kt$@Composable fun LocationListItem( country: String, state: String, onItemClick: () -&gt; Unit, onDeleteClick: (() -&gt; Unit)? = null, temperature: String? = null, weatherCondition: String? = null, isCurrentLocation: Boolean = false )</ID>
    <ID>LongMethod:ManageLocationsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ManageLocationsScreen( navController: NavController, fromLocationIssue: Boolean = false, viewModel: ManageLocationsViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:PlaceSearchResultItem.kt$@Composable fun PlaceSearchResultItem( place: PlaceSearchResult, canAddLocation: Boolean, isAddingLocation: Boolean, onAddLocation: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:PlacesSearchContent.kt$@Composable fun PlacesSearchContent( uiState: PlacesSearchUiState, searchQuery: String, onSearchQueryChange: (String) -&gt; Unit, onAddLocation: (PlaceSearchResult) -&gt; Unit, onClearSearch: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:PlacesSearchScreen.kt$@Composable fun PlacesSearchScreen( navController: NavController, viewModel: PlacesSearchViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:SavedLocationsSection.kt$@Composable fun SavedLocationsSection( savedLocationsInfo: List&lt;SavedLocation&gt;, isLoading: Boolean = false, onLocationClick: (SavedLocation) -&gt; Unit, onDeleteLocation: (String) -&gt; Unit = {} )</ID>
    <ID>LongMethod:WeatherDetailsScreen.kt$@Composable fun WeatherDetailsScreen( navController: NavController, viewModel: WeatherDetailsViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:WeatherDetailsScreen.kt$@Composable private fun ForecastItem( forecast: WeatherForecast, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:WeatherDetailsScreen.kt$@Composable private fun WeatherDetailsCard( currentWeather: CurrentWeather, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:WeatherDetailsViewModel.kt$WeatherDetailsViewModel$private fun useCurrentDeviceLocation()</ID>
    <ID>LongParameterList:CurrentLocationSection.kt$( permissionState: PermissionState, currentSavedLocation: SavedLocation?, currentLocationWeather: com.kazimi.syarahweather.domain.model.WeatherData?, onUpdateLocationPermissionClick: () -&gt; Unit = {}, onOpenSettingsClick: () -&gt; Unit = {}, onCurrentLocationClick: (SavedLocation) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:LocationListtItem.kt$( country: String, state: String, onItemClick: () -&gt; Unit, onDeleteClick: (() -&gt; Unit)? = null, temperature: String? = null, weatherCondition: String? = null, isCurrentLocation: Boolean = false )</ID>
    <ID>LongParameterList:ManageLocationsViewModel.kt$ManageLocationsViewModel$( private val getCurrentLocationUseCase: GetCurrentLocationUseCase, private val getCurrentSavedLocationUseCase: GetCurrentSavedLocationUseCase, private val getSavedLocationsUseCase: GetSavedLocationsUseCase, private val getWeatherUseCase: GetWeatherUseCase, private val setCurrentLocationUseCase: SetCurrentLocationUseCase, private val removeLocationUseCase: RemoveLocationUseCase, private val locationHelper: LocationHelper )</ID>
    <ID>LongParameterList:PlacesSearchContent.kt$( uiState: PlacesSearchUiState, searchQuery: String, onSearchQueryChange: (String) -&gt; Unit, onAddLocation: (PlaceSearchResult) -&gt; Unit, onClearSearch: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:WeatherDetailsViewModel.kt$WeatherDetailsViewModel$( private val getWeatherUseCase: GetWeatherUseCase, private val getFiveDayForecastUseCase: GetFiveDayForecastUseCase, private val getCurrentLocationUseCase: GetCurrentLocationUseCase, private val getCurrentSavedLocationUseCase: GetCurrentSavedLocationUseCase, private val setCurrentLocationUseCase: SetCurrentLocationUseCase, private val locationHelper: LocationHelper, savedStateHandle: SavedStateHandle )</ID>
    <ID>MagicNumber:ApiResponse.kt$404</ID>
    <ID>MagicNumber:Color.kt$0xFF000000</ID>
    <ID>MagicNumber:Color.kt$0xFF002023</ID>
    <ID>MagicNumber:Color.kt$0xFF083739</ID>
    <ID>MagicNumber:Color.kt$0xFF13140F</ID>
    <ID>MagicNumber:Color.kt$0xFF1B1C17</ID>
    <ID>MagicNumber:Color.kt$0xFF1C1E11</ID>
    <ID>MagicNumber:Color.kt$0xFF1F2607</ID>
    <ID>MagicNumber:Color.kt$0xFF274E51</ID>
    <ID>MagicNumber:Color.kt$0xFF30312B</ID>
    <ID>MagicNumber:Color.kt$0xFF313325</ID>
    <ID>MagicNumber:Color.kt$0xFF343C18</ID>
    <ID>MagicNumber:Color.kt$0xFF3F676A</ID>
    <ID>MagicNumber:Color.kt$0xFF410002</ID>
    <ID>MagicNumber:Color.kt$0xFF46473B</ID>
    <ID>MagicNumber:Color.kt$0xFF47493A</ID>
    <ID>MagicNumber:Color.kt$0xFF4F5928</ID>
    <ID>MagicNumber:Color.kt$0xFF5F6050</ID>
    <ID>MagicNumber:Color.kt$0xFF690005</ID>
    <ID>MagicNumber:Color.kt$0xFF6B7B3A</ID>
    <ID>MagicNumber:Color.kt$0xFF77786A</ID>
    <ID>MagicNumber:Color.kt$0xFF919084</ID>
    <ID>MagicNumber:Color.kt$0xFF93000A</ID>
    <ID>MagicNumber:Color.kt$0xFFA6D0D4</ID>
    <ID>MagicNumber:Color.kt$0xFFBA1A1A</ID>
    <ID>MagicNumber:Color.kt$0xFFC2ECF0</ID>
    <ID>MagicNumber:Color.kt$0xFFC7C7BB</ID>
    <ID>MagicNumber:Color.kt$0xFFC7CAB4</ID>
    <ID>MagicNumber:Color.kt$0xFFD6DAC8</ID>
    <ID>MagicNumber:Color.kt$0xFFE4E3D6</ID>
    <ID>MagicNumber:Color.kt$0xFFE4E3DC</ID>
    <ID>MagicNumber:Color.kt$0xFFE4E6D0</ID>
    <ID>MagicNumber:Color.kt$0xFFF2F1EA</ID>
    <ID>MagicNumber:Color.kt$0xFFF2F7E3</ID>
    <ID>MagicNumber:Color.kt$0xFFFDFCF5</ID>
    <ID>MagicNumber:Color.kt$0xFFFFB4AB</ID>
    <ID>MagicNumber:Color.kt$0xFFFFDAD6</ID>
    <ID>MagicNumber:Color.kt$0xFFFFFFFF</ID>
    <ID>MagicNumber:GetFiveDayForecastUseCase.kt$GetFiveDayForecastUseCase$5</ID>
    <ID>MagicNumber:LocationHelper.kt$LocationHelper$10000L</ID>
    <ID>MagicNumber:LocationHelper.kt$LocationHelper$30000L</ID>
    <ID>MagicNumber:NetworkModule.kt$NetworkModule$30</ID>
    <ID>MagicNumber:WeatherDetailsScreen.kt$5</ID>
    <ID>MatchingDeclarationName:AppScreens.kt$Screen</ID>
    <ID>MatchingDeclarationName:Constants.kt$LocationConstants</ID>
    <ID>MaxLineLength:LocationListtItem.kt$tint = if (isCurrentLocation) MaterialTheme.colorScheme.secondary else MaterialTheme.colorScheme.primary</ID>
    <ID>MaxLineLength:ManageLocationsScreen.kt$text = "Location permission has been permanently disabled. To enable location services, please go to Settings and allow location access for this app."</ID>
    <ID>MaxLineLength:ManageLocationsScreen.kt$text = "This app needs location access to provide accurate weather information for your current location. We respect your privacy and only use your location to fetch weather data."</ID>
    <ID>MaxLineLength:ManageLocationsViewModel.kt$ManageLocationsViewModel$is ManageLocationsViewIntent.NavigateToPlacesSearch -&gt; sendAction(ManageLocationsViewAction.NavigateToPlacesSearch)</ID>
    <ID>MaxLineLength:ManageLocationsViewModel.kt$ManageLocationsViewModel$is ManageLocationsViewIntent.NavigateToWeatherDetails -&gt; sendAction(ManageLocationsViewAction.NavigateToWeatherDetails(intent.location))</ID>
    <ID>MaxLineLength:ManageLocationsViewModel.kt$ManageLocationsViewModel$is ManageLocationsViewIntent.OpenLocationSettings -&gt; sendAction(ManageLocationsViewAction.OpenLocationSettings)</ID>
    <ID>MaxLineLength:ManageLocationsViewModel.kt$ManageLocationsViewModel$isPermissionDeniedPermanently = if (hasLocationPermission) false else currentState.permissionState.isPermissionDeniedPermanently</ID>
    <ID>MaxLineLength:ManageLocationsViewModel.kt$ManageLocationsViewModel$private</ID>
    <ID>MaxLineLength:SaveNewLocationUseCase.kt$SaveNewLocationUseCase$emit(Result.Error(AppError(message = "Maximum ${LocationConstants.MAX_SAVED_LOCATIONS} locations allowed")))</ID>
    <ID>MaximumLineLength:LocationListtItem.kt$ </ID>
    <ID>MaximumLineLength:ManageLocationsScreen.kt$ </ID>
    <ID>MaximumLineLength:ManageLocationsViewModel.kt$ManageLocationsViewModel$ </ID>
    <ID>MaximumLineLength:SaveNewLocationUseCase.kt$SaveNewLocationUseCase$ </ID>
    <ID>NewLineAtEndOfFile:AppError.kt$com.kazimi.syarahweather.domain.error.AppError.kt</ID>
    <ID>NewLineAtEndOfFile:AppModule.kt$com.kazimi.di.AppModule.kt</ID>
    <ID>NewLineAtEndOfFile:AppScreens.kt$com.kazimi.syarahweather.ui.navigation.AppScreens.kt</ID>
    <ID>NewLineAtEndOfFile:CanAddMoreLocationsUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.CanAddMoreLocationsUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:Color.kt$com.kazimi.syarahweather.ui.theme.Color.kt</ID>
    <ID>NewLineAtEndOfFile:ComposeBaseViewModel.kt$com.kazimi.syarahweather.ui.base.viewmodel.ComposeBaseViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:Constants.kt$com.kazimi.syarahweather.domain.common.Constants.kt</ID>
    <ID>NewLineAtEndOfFile:CurrentLocationSection.kt$com.kazimi.syarahweather.ui.screens.managelocations.component.CurrentLocationSection.kt</ID>
    <ID>NewLineAtEndOfFile:CurrentWeatherResponse.kt$com.kazimi.syarahweather.data.dto.CurrentWeatherResponse.kt</ID>
    <ID>NewLineAtEndOfFile:ExampleUnitTest.kt$com.kazimi.syarahweather.ExampleUnitTest.kt</ID>
    <ID>NewLineAtEndOfFile:GetCurrentLocationUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.GetCurrentLocationUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:GetCurrentSavedLocationUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.GetCurrentSavedLocationUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:GetFiveDayForecastUseCase.kt$com.kazimi.syarahweather.domain.usecase.weatherdetails.GetFiveDayForecastUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:GetFiveDayForecastUseCaseTest.kt$com.kazimi.syarahweather.domain.usecase.weatherdetails.GetFiveDayForecastUseCaseTest.kt</ID>
    <ID>NewLineAtEndOfFile:GetSavedLocationsUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.GetSavedLocationsUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:GetWeatherUseCase.kt$com.kazimi.syarahweather.domain.usecase.weatherdetails.GetWeatherUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:LocationDataSource.kt$com.kazimi.syarahweather.domain.datasource.LocationDataSource.kt</ID>
    <ID>NewLineAtEndOfFile:LocationDataSourceImpl.kt$com.kazimi.syarahweather.data.local.datasource.LocationDataSourceImpl.kt</ID>
    <ID>NewLineAtEndOfFile:LocationHelper.kt$com.kazimi.syarahweather.ui.util.LocationHelper.kt</ID>
    <ID>NewLineAtEndOfFile:LocationJsonConverter.kt$com.kazimi.syarahweather.data.local.converter.LocationJsonConverter.kt</ID>
    <ID>NewLineAtEndOfFile:LocationRepository.kt$com.kazimi.syarahweather.domain.repository.LocationRepository.kt</ID>
    <ID>NewLineAtEndOfFile:LocationRepositoryImpl.kt$com.kazimi.syarahweather.data.repository.LocationRepositoryImpl.kt</ID>
    <ID>NewLineAtEndOfFile:MainActivity.kt$com.kazimi.syarahweather.MainActivity.kt</ID>
    <ID>NewLineAtEndOfFile:ManageLocationsViewIntent.kt$com.kazimi.syarahweather.ui.screens.managelocations.ManageLocationsViewIntent.kt</ID>
    <ID>NewLineAtEndOfFile:Mapper.kt$com.kazimi.syarahweather.data.Mapper.kt</ID>
    <ID>NewLineAtEndOfFile:NetworkModule.kt$com.kazimi.di.NetworkModule.kt</ID>
    <ID>NewLineAtEndOfFile:PlaceSearchResult.kt$com.kazimi.syarahweather.domain.model.PlaceSearchResult.kt</ID>
    <ID>NewLineAtEndOfFile:PlaceSearchResultItem.kt$com.kazimi.syarahweather.ui.screens.placesearch.component.PlaceSearchResultItem.kt</ID>
    <ID>NewLineAtEndOfFile:PlacesRepository.kt$com.kazimi.syarahweather.domain.repository.PlacesRepository.kt</ID>
    <ID>NewLineAtEndOfFile:PlacesRepositoryImpl.kt$com.kazimi.syarahweather.data.repository.PlacesRepositoryImpl.kt</ID>
    <ID>NewLineAtEndOfFile:PlacesSearchContent.kt$com.kazimi.syarahweather.ui.screens.placesearch.component.PlacesSearchContent.kt</ID>
    <ID>NewLineAtEndOfFile:PlacesSearchScreen.kt$com.kazimi.syarahweather.ui.screens.placesearch.PlacesSearchScreen.kt</ID>
    <ID>NewLineAtEndOfFile:PlacesSearchViewAction.kt$com.kazimi.syarahweather.ui.screens.placesearch.PlacesSearchViewAction.kt</ID>
    <ID>NewLineAtEndOfFile:PlacesSearchViewIntent.kt$com.kazimi.syarahweather.ui.screens.placesearch.PlacesSearchViewIntent.kt</ID>
    <ID>NewLineAtEndOfFile:PlacesSearchViewModel.kt$com.kazimi.syarahweather.ui.screens.placesearch.PlacesSearchViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:RemoveLocationUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.RemoveLocationUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:RepositoryModule.kt$com.kazimi.di.RepositoryModule.kt</ID>
    <ID>NewLineAtEndOfFile:Result.kt$com.kazimi.syarahweather.domain.common.Result.kt</ID>
    <ID>NewLineAtEndOfFile:SaveNewLocationUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.SaveNewLocationUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:SavedLocationItem.kt$com.kazimi.syarahweather.ui.screens.placesearch.component.SavedLocationItem.kt</ID>
    <ID>NewLineAtEndOfFile:SavedLocationsSection.kt$com.kazimi.syarahweather.ui.screens.managelocations.component.SavedLocationsSection.kt</ID>
    <ID>NewLineAtEndOfFile:SearchPlacesUseCase.kt$com.kazimi.syarahweather.domain.usecase.placesearch.SearchPlacesUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:SearchStates.kt$com.kazimi.syarahweather.ui.screens.placesearch.component.SearchStates.kt</ID>
    <ID>NewLineAtEndOfFile:SetCurrentLocationUseCase.kt$com.kazimi.syarahweather.domain.usecase.managelocation.SetCurrentLocationUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:SyarahWeather.kt$com.kazimi.syarahweather.SyarahWeather.kt</ID>
    <ID>NewLineAtEndOfFile:Theme.kt$com.kazimi.syarahweather.ui.theme.Theme.kt</ID>
    <ID>NewLineAtEndOfFile:Type.kt$com.kazimi.syarahweather.ui.theme.Type.kt</ID>
    <ID>NewLineAtEndOfFile:ViewAction.kt$com.kazimi.syarahweather.ui.base.viewmodel.ViewAction.kt</ID>
    <ID>NewLineAtEndOfFile:ViewIntent.kt$com.kazimi.syarahweather.ui.base.viewmodel.ViewIntent.kt</ID>
    <ID>NewLineAtEndOfFile:WeatherAPI.kt$com.kazimi.syarahweather.data.net.api.WeatherAPI.kt</ID>
    <ID>NewLineAtEndOfFile:WeatherData.kt$com.kazimi.syarahweather.domain.model.WeatherData.kt</ID>
    <ID>NewLineAtEndOfFile:WeatherDetailsScreen.kt$com.kazimi.syarahweather.ui.screens.weatherdetails.WeatherDetailsScreen.kt</ID>
    <ID>NewLineAtEndOfFile:WeatherDetailsViewIntent.kt$com.kazimi.syarahweather.ui.screens.weatherdetails.WeatherDetailsViewIntent.kt</ID>
    <ID>NewLineAtEndOfFile:WeatherDetailsViewModel.kt$com.kazimi.syarahweather.ui.screens.weatherdetails.WeatherDetailsViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:WeatherRepository.kt$com.kazimi.syarahweather.domain.repository.WeatherRepository.kt</ID>
    <ID>NewLineAtEndOfFile:WeatherRepositoryImpl.kt$com.kazimi.syarahweather.data.repository.WeatherRepositoryImpl.kt</ID>
    <ID>NewLineAtEndOfFile:WeatherService.kt$com.kazimi.syarahweather.data.net.services.WeatherService.kt</ID>
    <ID>NoBlankLineBeforeRbrace:LocationDataSourceImpl.kt$LocationDataSourceImpl$ </ID>
    <ID>NoBlankLineBeforeRbrace:LocationHelper.kt$LocationHelper$ </ID>
    <ID>NoBlankLineBeforeRbrace:SetCurrentLocationUseCase.kt$SetCurrentLocationUseCase$ </ID>
    <ID>NoBlankLineBeforeRbrace:WeatherAPI.kt$WeatherAPI$ </ID>
    <ID>NoBlankLineBeforeRbrace:WeatherDetailsViewModel.kt$WeatherDetailsViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:WeatherRepositoryImpl.kt$WeatherRepositoryImpl$ </ID>
    <ID>NoConsecutiveBlankLines:ApiException.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ApiResponse.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CoroutinesModule.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CurrentWeatherResponse.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CurrentWeatherResponse.kt$CurrentWeatherResponse$ </ID>
    <ID>NoConsecutiveBlankLines:ForecastWeatherResponse.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ForecastWeatherResponse.kt$ForecastWeatherResponse$ </ID>
    <ID>NoConsecutiveBlankLines:LocationDataSourceExt.kt$ </ID>
    <ID>NoConsecutiveBlankLines:LocationDataSourceImpl.kt$LocationDataSourceImpl$ </ID>
    <ID>NoConsecutiveBlankLines:ManageLocationsScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:WeatherAPI.kt$WeatherAPI$ </ID>
    <ID>NoConsecutiveBlankLines:WeatherDetailsViewModel.kt$WeatherDetailsViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:WeatherRepositoryImpl.kt$WeatherRepositoryImpl$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:Mapper.kt$ </ID>
    <ID>NoMultipleSpaces:ApiResponse.kt$ </ID>
    <ID>NoMultipleSpaces:CurrentWeatherResponse.kt$CurrentWeatherResponse$ </ID>
    <ID>NoTrailingSpaces:AppError.kt$ </ID>
    <ID>NoTrailingSpaces:AppModule.kt$AppModule$ </ID>
    <ID>NoTrailingSpaces:AppNavigation.kt$ </ID>
    <ID>NoTrailingSpaces:AppScreens.kt$Screen$ </ID>
    <ID>NoTrailingSpaces:CanAddMoreLocationsUseCase.kt$ </ID>
    <ID>NoTrailingSpaces:ComposeBaseViewModel.kt$ </ID>
    <ID>NoTrailingSpaces:Constants.kt$ </ID>
    <ID>NoTrailingSpaces:CurrentLocationSection.kt$ </ID>
    <ID>NoTrailingSpaces:CurrentWeatherResponse.kt$CurrentWeatherResponse$ </ID>
    <ID>NoTrailingSpaces:ForecastWeatherResponse.kt$ForecastWeatherResponse$ </ID>
    <ID>NoTrailingSpaces:GetCurrentLocationUseCase.kt$ </ID>
    <ID>NoTrailingSpaces:GetCurrentSavedLocationUseCase.kt$ </ID>
    <ID>NoTrailingSpaces:GetFiveDayForecastUseCase.kt$ </ID>
    <ID>NoTrailingSpaces:GetFiveDayForecastUseCase.kt$GetFiveDayForecastUseCase$ </ID>
    <ID>NoTrailingSpaces:GetFiveDayForecastUseCaseTest.kt$ </ID>
    <ID>NoTrailingSpaces:GetFiveDayForecastUseCaseTest.kt$GetFiveDayForecastUseCaseTest$ </ID>
    <ID>NoTrailingSpaces:LocationJsonConverter.kt$ </ID>
    <ID>NoTrailingSpaces:LocationJsonConverter.kt$LocationJsonConverter$ </ID>
    <ID>NoTrailingSpaces:LocationListtItem.kt$ </ID>
    <ID>NoTrailingSpaces:LocationRepositoryImpl.kt$ </ID>
    <ID>NoTrailingSpaces:LocationRepositoryImpl.kt$LocationRepositoryImpl$ </ID>
    <ID>NoTrailingSpaces:ManageLocationsViewIntent.kt$ManageLocationsViewIntent$ </ID>
    <ID>NoTrailingSpaces:ManageLocationsViewModel.kt$ManageLocationsViewModel$ </ID>
    <ID>NoTrailingSpaces:NetworkModule.kt$ </ID>
    <ID>NoTrailingSpaces:NetworkModule.kt$NetworkModule$ </ID>
    <ID>NoTrailingSpaces:PlaceSearchResult.kt$ </ID>
    <ID>NoTrailingSpaces:PlaceSearchResultItem.kt$ </ID>
    <ID>NoTrailingSpaces:PlacesRepositoryImpl.kt$ </ID>
    <ID>NoTrailingSpaces:PlacesRepositoryImpl.kt$PlacesRepositoryImpl$ </ID>
    <ID>NoTrailingSpaces:PlacesSearchContent.kt$ </ID>
    <ID>NoTrailingSpaces:PlacesSearchScreen.kt$ </ID>
    <ID>NoTrailingSpaces:PlacesSearchViewAction.kt$ </ID>
    <ID>NoTrailingSpaces:PlacesSearchViewModel.kt$ </ID>
    <ID>NoTrailingSpaces:RepositoryModule.kt$ </ID>
    <ID>NoTrailingSpaces:RepositoryModule.kt$RepositoryModule$ </ID>
    <ID>NoTrailingSpaces:Result.kt$ </ID>
    <ID>NoTrailingSpaces:SaveNewLocationUseCase.kt$SaveNewLocationUseCase$ </ID>
    <ID>NoTrailingSpaces:SavedLocationItem.kt$ </ID>
    <ID>NoTrailingSpaces:SearchPlacesUseCase.kt$ </ID>
    <ID>NoTrailingSpaces:SearchStates.kt$ </ID>
    <ID>NoTrailingSpaces:SyarahWeather.kt$SyarahWeather$ </ID>
    <ID>NoTrailingSpaces:ViewAction.kt$ </ID>
    <ID>NoTrailingSpaces:ViewIntent.kt$ </ID>
    <ID>NoTrailingSpaces:WeatherAPI.kt$ </ID>
    <ID>NoTrailingSpaces:WeatherData.kt$ </ID>
    <ID>NoTrailingSpaces:WeatherDetailsScreen.kt$ </ID>
    <ID>NoTrailingSpaces:WeatherDetailsViewIntent.kt$ </ID>
    <ID>NoTrailingSpaces:WeatherDetailsViewModel.kt$ </ID>
    <ID>NoTrailingSpaces:WeatherDetailsViewModel.kt$WeatherDetailsViewModel$ </ID>
    <ID>NoTrailingSpaces:WeatherDetailsViewModel.kt$WeatherDetailsViewModel$// No saved current location, get device location </ID>
    <ID>NoTrailingSpaces:WeatherRepository.kt$ </ID>
    <ID>NoTrailingSpaces:WeatherRepositoryImpl.kt$ </ID>
    <ID>NoUnusedImports:MainActivity.kt$com.kazimi.syarahweather.MainActivity.kt</ID>
    <ID>NoUnusedImports:PlacesRepositoryImpl.kt$com.kazimi.syarahweather.data.repository.PlacesRepositoryImpl.kt</ID>
    <ID>NoUnusedImports:PlacesSearchContent.kt$com.kazimi.syarahweather.ui.screens.placesearch.component.PlacesSearchContent.kt</ID>
    <ID>NoWildcardImports:ExampleUnitTest.kt$import org.junit.Assert.*</ID>
    <ID>SpacingAroundColon:LocationDataSource.kt$LocationDataSource$:</ID>
    <ID>SpacingAroundColon:SetCurrentLocationUseCase.kt$SetCurrentLocationUseCase$:</ID>
    <ID>SpreadOperator:PermissionExt.kt$PermissionExt$(activity, *getLocationPermissions())</ID>
    <ID>StringTemplate:LocationListtItem.kt$${temperature}</ID>
    <ID>SwallowedException:LocationJsonConverter.kt$LocationJsonConverter$e: Exception</ID>
    <ID>SwallowedException:PlacesRepositoryImpl.kt$PlacesRepositoryImpl$e: Exception</ID>
    <ID>SwallowedException:WeatherDetailsScreen.kt$e: Exception</ID>
    <ID>SwallowedException:WeatherDetailsViewModel.kt$WeatherDetailsViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LocationJsonConverter.kt$LocationJsonConverter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PlacesRepositoryImpl.kt$PlacesRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PlacesSearchViewModel.kt$PlacesSearchViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SaveNewLocationUseCase.kt$SaveNewLocationUseCase$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WeatherDetailsScreen.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WeatherDetailsViewModel.kt$WeatherDetailsViewModel$e: Exception</ID>
    <ID>TooManyFunctions:ManageLocationsViewModel.kt$ManageLocationsViewModel : ComposeBaseViewModel</ID>
    <ID>TooManyFunctions:WeatherDetailsScreen.kt$com.kazimi.syarahweather.ui.screens.weatherdetails.WeatherDetailsScreen.kt</ID>
    <ID>UnusedPrivateMember:ManageLocationsViewModel.kt$ManageLocationsViewModel$private fun createSavedLocationFromLocation(location: Location): SavedLocation</ID>
    <ID>UnusedPrivateMember:WeatherDetailsViewModel.kt$WeatherDetailsViewModel$private fun createSavedLocationFromLocation(location: Location): SavedLocation</ID>
    <ID>UnusedPrivateProperty:CurrentLocationSection.kt$val locationDetails = buildString { currentSavedLocation.state?.let { append("$it, ") } currentSavedLocation.country?.let { append(it) } }.takeIf { it.isNotBlank() } ?: "Unknown location"</ID>
    <ID>UnusedPrivateProperty:CurrentLocationSection.kt$val locationTitle = currentSavedLocation.name</ID>
    <ID>WildcardImport:ExampleUnitTest.kt$import org.junit.Assert.*</ID>
    <ID>Wrapping:AppNavigation.kt$(</ID>
  </CurrentIssues>
</SmellBaseline>
